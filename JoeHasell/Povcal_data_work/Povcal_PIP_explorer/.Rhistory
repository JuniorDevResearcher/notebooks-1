"Decile.6...threshold.of.income.or.consumption.per.month",
"Decile.7...threshold.of.income.or.consumption.per.month",
"Decile.8...threshold.of.income.or.consumption.per.month",
"Decile.9...threshold.of.income.or.consumption.per.month",
"Decile.1...average.income.or.consumption.per.month",
"Decile.2...average.income.or.consumption.per.month",
"Decile.3...average.income.or.consumption.per.month",
"Decile.4...average.income.or.consumption.per.month",
"Decile.5...average.income.or.consumption.per.month",
"Decile.6...average.income.or.consumption.per.month",
"Decile.7...average.income.or.consumption.per.month",
"Decile.8...average.income.or.consumption.per.month",
"Decile.9...average.income.or.consumption.per.month",
"Decile.10...average.income.or.consumption.per.month",
"Gini.index",
"Gini_estimated",
"Polarization",
"Polarization_estimated",
"MLD",
"MLD_estimated",
"Palma",
"P90.P10.ratio",
"P90.50.ratio",
"Entropy_0_5",
"Entropy_1_0",
"Entropy_1_5",
"Entropy_2_0",
"Atkinson_0_5",
"Atkinson_1_0",
"Atkinson_1_5",
"Atkinson_2_0",
"Theil_0_0",
"Theil_0_5",
"Theil_1_0",
"Theil_1_5",
"Theil_2_0",
"Var.Coeff",
"datayear",
"isinterpolated",
"usemicrodata",
"coveragetype",
"datatype",
"IsSurveyYear",
"OriginalMedian",
"OriginalMean",
"OriginalDecileShares",
"MonotonicityBreaks",
"RowsWithIncreasingHeadcount",
"DataframeRowsForGpinter",
"LessThan33Rows",
"ISO3DataYearCovType",
"ISO3Year"
)
new_varnames<- c(
"Entity",
"Year",
"headcount_ratio_1_00",
"poverty_gap_index_1_00",
"headcount_1_00",
"total_shortall_annual_1_00",
"income_gap_ratio_1_00",
"watts_index_1_00",
"headcount_ratio_1_90",
"poverty_gap_index_1_90",
"headcount_1_90",
"total_shortall_annual_1_90",
"income_gap_ratio_1_90",
"watts_index_1_90",
"headcount_ratio_3_20",
"poverty_gap_index_3_20",
"headcount_3_20",
"total_shortall_annual_3_20",
"income_gap_ratio_3_20",
"watts_index_3_20",
"headcount_ratio_5_50",
"poverty_gap_index_5_50",
"headcount_5_50",
"total_shortall_annual_5_50",
"income_gap_ratio_5_50",
"watts_index_5_50",
"headcount_ratio_10_00",
"poverty_gap_index_10_00",
"headcount_10_00",
"total_shortall_annual_10_00",
"income_gap_ratio_10_00",
"watts_index_10_00",
"headcount_ratio_15_00",
"poverty_gap_index_15_00",
"headcount_15_00",
"total_shortall_annual_15_00",
"income_gap_ratio_15_00",
"watts_index_15_00",
"headcount_ratio_20_00",
"poverty_gap_index_20_00",
"headcount_20_00",
"total_shortall_annual_20_00",
"income_gap_ratio_20_00",
"watts_index_20_00",
"headcount_ratio_30_00",
"poverty_gap_index_30_00",
"headcount_30_00",
"total_shortall_annual_30_00",
"income_gap_ratio_30_00",
"watts_index_30_00",
"headcount_ratio_40_00",
"poverty_gap_index_40_00",
"headcount_40_00",
"total_shortall_annual_40_00",
"income_gap_ratio_40_00",
"watts_index_40_00",
"headcount_ratio_40_median",
"poverty_gap_index_40_median",
"headcount_40_median",
"total_shortall_annual_40_median",
"income_gap_ratio_40_median",
"watts_index_40_median",
"headcount_ratio_50_median",
"poverty_gap_index_50_median",
"headcount_50_median",
"total_shortall_annual_50_median",
"income_gap_ratio_50_median",
"watts_index_50_median",
"headcount_ratio_60_median",
"poverty_gap_index_60_median",
"headcount_60_median",
"total_shortall_annual_60_median",
"income_gap_ratio_60_median",
"watts_index_60_median",
"MeanPerMonth",
"MeanPerMonth_estimated",
"MedianPerMonth",
"MedianPerMonth_estimated",
"PPP",
"Population",
"share_decile_1",
"share_decile_2",
"share_decile_3",
"share_decile_4",
"share_decile_5",
"share_decile_6",
"share_decile_7",
"share_decile_8",
"share_decile_9",
"share_decile_10",
"threshold_annual_decile_1",
"threshold_annual_decile_2",
"threshold_annual_decile_3",
"threshold_annual_decile_4",
"threshold_annual_decile_5",
"threshold_annual_decile_6",
"threshold_annual_decile_7",
"threshold_annual_decile_8",
"threshold_annual_decile_9",
"average_annual_decile_1",
"average_annual_decile_2",
"average_annual_decile_3",
"average_annual_decile_4",
"average_annual_decile_5",
"average_annual_decile_6",
"average_annual_decile_7",
"average_annual_decile_8",
"average_annual_decile_9",
"average_annual_decile_10",
"Gini",
"Gini_estimated",
"Polarization",
"Polarization_estimated",
"MLD",
"MLD_estimated",
"Palma",
"P90_P10_ratio",
"P90_50_ratio",
"Entropy_0_5",
"Entropy_1_0",
"Entropy_1_5",
"Entropy_2_0",
"Atkinson_0_5",
"Atkinson_1_0",
"Atkinson_1_5",
"Atkinson_2_0",
"Theil_0_0",
"Theil_0_5",
"Theil_1_0",
"Theil_1_5",
"Theil_2_0",
"Var.Coeff",
"datayear",
"isinterpolated",
"usemicrodata",
"coveragetype",
"datatype",
"IsSurveyYear",
"OriginalMedian",
"OriginalMean",
"OriginalDecileShares",
"MonotonicityBreaks",
"RowsWithIncreasingHeadcount",
"DataframeRowsForGpinter",
"LessThan33Rows",
"ISO3DataYearCovType",
"ISO3Year"
)
varname_map<- data.frame(orig_varnames,new_varnames)
df<- df %>%
pivot_longer(cols = !c(Entity, Year, coveragetype, datatype, ISO3Year, ISO3DataYearCovType, IsSurveyYear), names_to = "orig_varnames", values_to = "value")
# Merge in new var names
df<- left_join(df, varname_map)
# check there are no unmatched vars
br<- df %>%
filter(is.na(new_varnames))
# drop original varnames
df<- df %>%
select(-orig_varnames)
df<- df %>%
mutate(Entity = if_else(coveragetype == "R",
paste0(Entity, " -  Rural"),
Entity)) %>%
mutate(Entity = if_else(coveragetype == "U",
paste0(Entity, " -  Urban"),
Entity))
# Convert shares into percentages
df<- df %>%
mutate(value = if_else(grepl("headcount_ratio|income_gap_ratio|poverty_gap_index",new_varnames),
value*100,
value))
new_vars<- list()
# Duplicate headcount and headcount ratio vars as a hacky way to have shorter names when shown in a multimetric chart with lots of povlines
new_vars[["headcount_alts"]]<- df %>%
filter(grepl("headcount_",new_varnames) & !grepl("median",new_varnames)) %>%
mutate(new_varnames = str_replace(new_varnames, "headcount_", "multi_headcount_"))
# Calculate daily decile averages and thresholds from annual values
new_vars[["threshold_annual"]]<- df %>%
filter(grepl("threshold_annual",new_varnames)) %>%
mutate(new_varnames = str_replace(new_varnames, "threshold_annual", "threshold_daily"),
value = value/365)
new_vars[["average_annual"]]<- df %>%
filter(grepl("average_annual",new_varnames)) %>%
mutate(new_varnames = str_replace(new_varnames, "average_annual", "average_daily"),
value = value/365)
# Calculate daily and annual means from monthly values
new_vars[["mean_daily"]]<- df %>%
filter(new_varnames== "MeanPerMonth") %>%
mutate(new_varnames = str_replace(new_varnames, "MeanPerMonth", "mean_daily"),
value = value/(365/12))
new_vars[["mean_annual"]]<- df %>%
filter(new_varnames== "MeanPerMonth") %>%
mutate(new_varnames = str_replace(new_varnames, "MeanPerMonth", "mean_annual"),
value = value*12)
# Calculate daily and annual median from monthly values
new_vars[["median_daily"]]<- df %>%
filter(new_varnames== "MedianPerMonth") %>%
mutate(new_varnames = str_replace(new_varnames, "MedianPerMonth", "median_daily"),
value = value/(365/12))
new_vars[["median_annual"]]<- df %>%
filter(new_varnames== "MedianPerMonth") %>%
mutate(new_varnames = str_replace(new_varnames, "MedianPerMonth", "median_annual"),
value = value*12)
# Calculate daily shortfall from annual shortfall
new_vars[["daily_total_shortfall"]]<- df %>%
filter(grepl("total_shortall_annual",new_varnames)) %>%
mutate(new_varnames = str_replace(new_varnames, "total_shortall_annual", "total_shortall_daily"),
value = value/365)
# Express income shares as percentages
new_vars[["share_decile"]]<- df %>%
filter(grepl("share_decile",new_varnames)) %>%
mutate(value = value*100)
# Calculate absolute shortfall per person in poverty (absolute poverty lines only)
new_vars[["avg_shortfall"]]<- df %>%
filter(grepl("income_gap_ratio",new_varnames) & !grepl("median",new_varnames)) %>%
mutate(pov_line_text = str_replace(new_varnames, "income_gap_ratio_", "")) %>% #grab poverty line from varname
mutate(pov_line_math = as.numeric(str_replace(pov_line_text, "_", "."))) %>% #convert povline to numeric
mutate(new_varnames = str_replace(new_varnames, "income_gap_ratio", "avg_shortfall"),
value = value/100 * pov_line_math) %>%
select(-c(pov_line_text, pov_line_math))
# calculate numbers in poverty between pov lines for stacked area
headcount_stacked_calcs<- df %>%
filter(grepl("headcount_",new_varnames) & !grepl("ratio",new_varnames)  & !grepl("median",new_varnames)) %>%
mutate(pov_line_text = str_replace(new_varnames, "headcount_", "")) %>% #grab poverty line from varname
mutate(pov_line_math = as.numeric(str_replace(pov_line_text, "_", "."))) #convert povline to numeric
# An ordered dataframe of povlines and their variable stubs
ordered_povlines<- headcount_stacked_calcs %>%
select(pov_line_text, pov_line_math) %>%
unique() %>%
arrange(pov_line_math)
selected_povlines<- c(1,1.90, 3.20, 5.50, 10, 30)
ordered_povlines<- ordered_povlines %>%
filter(pov_line_math %in% selected_povlines)
# create a list for these stacked vars
stacked_headcounts<- list()
# Go through each poverty line...
for(i in 1: length(ordered_povlines$pov_line_math)){
this_povline_stub<- ordered_povlines$pov_line_text[i]
povline_below_stub<- ordered_povlines$pov_line_text[i-1] #empty if 1=1
# if it's the lowest (first) poverty line...
if(i==1){
# create a 'stacked_below' variable equal to the headcount
stacked_headcounts[[paste0("headcount_stacked_below_", this_povline_stub)]]<- df %>%
filter(new_varnames == paste0("headcount_", this_povline_stub)) %>%
mutate(new_varnames = str_replace(new_varnames, "headcount_", "headcount_stacked_below_"))
# else if it's the highest (last) poverty line...
} else if(i==length(ordered_povlines$pov_line_math)){
# create a 'stacked_above' variable equal to the population minus headcount
df_upper<- df %>%
filter(new_varnames == "Population") %>%
rename(upper=value) %>%
select(-new_varnames)
df_lower<- df %>%
filter(new_varnames == paste0("headcount_", this_povline_stub)) %>%
rename(lower=value) %>%
select(-new_varnames)
df_calc<- merge(df_upper, df_lower) %>%
mutate(value = upper-lower,
new_varnames = paste0("headcount_stacked_above_", this_povline_stub)) %>%
select(-c(upper, lower))
stacked_headcounts[[paste0("headcount_stacked_above_", this_povline_stub)]]<- df_calc
# create a 'stacked_below' variable equal to the headcount minus headcount of poverty line below
df_upper<- df %>%
filter(new_varnames == paste0("headcount_", this_povline_stub)) %>%
rename(upper=value) %>%
select(-new_varnames)
df_lower<- df %>%
filter(new_varnames == paste0("headcount_", povline_below_stub)) %>%
rename(lower=value) %>%
select(-new_varnames)
df_calc<- merge(df_upper, df_lower) %>%
mutate(value = upper-lower,
new_varnames = paste0("headcount_stacked_below_", this_povline_stub)) %>%
select(-c(upper, lower))
stacked_headcounts[[paste0("headcount_stacked_below_", this_povline_stub)]]<- df_calc
# else it will be an in between poverty line, in which case...
} else{
# create a 'stacked_below' variable equal to the headcount minus headcount of poverty line below
df_upper<- df %>%
filter(new_varnames == paste0("headcount_", this_povline_stub)) %>%
rename(upper=value) %>%
select(-new_varnames)
df_lower<- df %>%
filter(new_varnames == paste0("headcount_", povline_below_stub)) %>%
rename(lower=value) %>%
select(-new_varnames)
df_calc<- merge(df_upper, df_lower) %>%
mutate(value = upper-lower,
new_varnames = paste0("headcount_stacked_below_", this_povline_stub)) %>%
select(-c(upper, lower))
stacked_headcounts[[paste0("headcount_stacked_below_", this_povline_stub)]]<- df_calc
}
}
# Collapse list of new stacked_headcounts vars into a single data frame and append to main data
df_stacked_headcount_vars<- bind_rows(stacked_headcounts)
df<- bind_rows(df, df_stacked_headcount_vars)
# calculate shares of population and append to main data
df_pop<- df %>%
filter(new_varnames == "Population") %>%
rename(Population=value) %>%
select(-new_varnames)
df_stacked_shares_vars<- left_join(df_stacked_headcount_vars, df_pop) %>%
mutate(value = value/Population * 100) %>%
mutate(new_varnames = str_replace(new_varnames, "headcount_stacked", "headcount_ratio_stacked")) %>%
select(-Population)
df<- bind_rows(df, df_stacked_shares_vars)
# Collapse list of new vars into a single data frame and append  to main data
df_new_vars_together<- bind_rows(new_vars)
df<- bind_rows(df, df_new_vars_together)
br<- df %>%
filter(grepl("stacked", new_varnames))
# explorer_var_sets<- list()
#
#
# poverty_var_stubs<- c(
#                       "headcount_ratio",
#                       "headcount",
#                       "multi_headcount_ratio",
#                       "multi_headcount",
#                       "headcount_ratio_stacked_below",
#                       "headcount_stacked_below",
#                       "avg_shortfall",
#                       "income_gap_ratio",
#                       "total_shortall_daily",
#                       "poverty_gap_index")
#
# pov_lines<- c(
#               "1_00",
#               "1_90",
#               "3_20",
#               "5_50",
#               "10_00",
#               "15_00",
#               "20_00",
#               "30_00",
#               "40_00",
#               "40_median",
#               "50_median",
#               "60_median"
# )
#
#
# # Make a dataframe with all possible pairings of vars and povlines
# pov_stub_line_combos<- expand.grid(poverty_var_stubs = poverty_var_stubs,
#                     pov_lines = pov_lines)
#
# # Drop the avg_shortfall var for relative poverty lines (I wasn't able to calucalate these above -  It is something that should be added to Michalis' script. When that is done, we can remove this exclusion)
# pov_stub_line_combos<- pov_stub_line_combos %>%
#   filter(!(grepl("_median", pov_lines) & poverty_var_stubs == "avg_shortfall"))
#
#
# # join the var and povline stubs
# explorer_var_sets[["poverty"]]<- paste0(pov_stub_line_combos$poverty_var_stubs, "_", pov_stub_line_combos$pov_lines)
#
#
# # Add the 'stacked_above' vars
# explorer_var_sets[["poverty"]]<- c(explorer_var_sets[["poverty"]],
#                                    "headcount_ratio_stacked_above_30_00",
#                                    "headcount_stacked_above_30_00")
#
#
#
#   # And so on for other
# # explorer_vars[["across_distribution"]]<- c(
# #
# # )
#
#
#
#  # Get a vector of names of the different explorers
#   explorers<- names(explorer_var_sets)
#
# for(explorer in explorers){
#
#   # Filter for specified vars (NB df is still in long format)
#   df_explorer<- df %>% filter(new_varnames %in% explorer_var_sets[[explorer]])
#
#   # Flip to long wide format
#   df_explorer<- df_explorer %>%pivot_wider(names_from = "new_varnames", values_from = "value")
#
#   # Split by survey data type and save separately
#   df_by_survey_type<- list()
#
#
#     # Income only, including extrapolated years
#     df_by_survey_type[["inc_extrap"]]<- df_explorer %>%
#       filter(datatype == "income")
#
#     # Income only, excluding extrapolated years
#     df_by_survey_type[["inc_no_extrap"]]<- df_explorer %>%
#       filter(IsSurveyYear == TRUE,
#              datatype == "income")
#
#     # Consumption only, including extrapolated years
#     df_by_survey_type[["cons_extrap"]]<- df_explorer %>%
#       filter(datatype == "consumption")
#
#     # Consumption only, excluding extrapolated years
#     df_by_survey_type[["cons_no_extrap"]]<- df_explorer %>%
#       filter(IsSurveyYear == TRUE,
#              datatype == "consumption")
#
#     # Both income and consumption, including extrapolated years
#     df_by_survey_type[["inc_or_cons_extrap"]]<- df_explorer
#
#     # Both income and consumption, excluding extrapolated years
#     df_by_survey_type[["inc_or_cons_no_extrap"]]<- df_explorer %>%
#       filter(IsSurveyYear == TRUE)
#
#
#   # Get a vector of names of the different survey types
#   survey_types<- names(df_by_survey_type)
#
#   # save the separated csvs
#   for(survey_type in survey_types){
#
#   filename<- paste0(survey_type,".csv")
#   fp<- paste0("data/", explorer, "/", filename)
#
#   write.csv(df_by_survey_type[[survey_type]], fp, row.names = FALSE)
#
#   }
#
#
#
# }
#
# Flip to long wide format
df<- df %>%pivot_wider(names_from = "new_varnames", values_from = "value")
# Split by survey data type and save separately
df_by_survey_type<- list()
# Income only, including extrapolated years
df_by_survey_type[["inc_extrap"]]<- df %>%
filter(datatype == "income")
# Income only, excluding extrapolated years
df_by_survey_type[["inc_no_extrap"]]<- df %>%
filter(IsSurveyYear == TRUE,
datatype == "income")
# Consumption only, including extrapolated years
df_by_survey_type[["cons_extrap"]]<- df %>%
filter(datatype == "consumption")
# Consumption only, excluding extrapolated years
df_by_survey_type[["cons_no_extrap"]]<- df %>%
filter(IsSurveyYear == TRUE,
datatype == "consumption")
# Both income and consumption, including extrapolated years
df_by_survey_type[["inc_or_cons_extrap"]]<- df
# Both income and consumption, excluding extrapolated years
df_by_survey_type[["inc_or_cons_no_extrap"]]<- df %>%
filter(IsSurveyYear == TRUE)
# Get a vector of names of the different survey types
survey_types<- names(df_by_survey_type)
# save the separated csvs
for(survey_type in survey_types){
filename<- paste0(survey_type,".csv")
fp<- paste0("data/", filename)
write.csv(df_by_survey_type[[survey_type]], fp, row.names = FALSE)
}
