df_ucdp_acd_full<- expand.grid(years, types)
# rename columns as per actual data
names(df_ucdp_acd_full)<- c("year", "type")
# merge in actual aggrgeated data
df_ucdp_acd_full<- left_join(df_ucdp_acd_full, df_ucdp_acd_agg)
# Replace NA with zeros as that's what 'no conflicts' means here
df_ucdp_acd_full<- df_ucdp_acd_full %>%
replace_na(number_of_conflicts, 0)
# Replace NA with zeros as that's what 'no conflicts' means here
df_ucdp_acd_full<- df_ucdp_acd_full %>%
replace_na(number_of_conflicts = 0)
# Replace NA with zeros as that's what 'no conflicts' means here
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(number_of_conflicts = replace_na(number_of_conflicts, 0))
df_ucdp_acd<- read.csv("original/UCDP Yearly datasets since 1946/ucdp-prio-acd-211.csv")
dups<- df_ucdp_acd %>%
group_by(conflict_id, year) %>%
filter(n()>1)
kable(dups)
df_ucdp_acd<- df_ucdp_acd %>%
rename(type = type_of_conflict)
# Region code is stored as string. A string length>1 means more than one region is coded.
multi_region_conflicts<- df_ucdp_acd %>%
filter(nchar(region)>1)
single_region_conflicts<- df_ucdp_acd %>%
filter(nchar(region)==1)
kable(multi_region_conflicts)
#  a blank dataframe to append the data for individual conflicts with multiple regions
df_multi_region_conflicts_by_region<- data.frame(year = numeric(),
region = numeric(),
type = numeric(),
conflict_id = numeric(),
conflict_share = numeric())
# for each conflict with multiple regions make a new df with one row per region, and give them the proportionate share
for(this_id in unique(multi_region_conflicts$conflict_id)){
this_conflict<- multi_region_conflicts %>%
filter(conflict_id == this_id)
regions_vector<- this_conflict %>%
select(region) %>%
unique() %>%
as.character() %>%
gsub(" ", "", .) %>%
strsplit(",") %>%
unlist()
this_conflict_region<- list()
for(reg in regions_vector){
this_conflict_region[[reg]]<-  this_conflict %>%
mutate(region = reg,
conflict_share = 1/length(regions_vector))
}
df_this_conflict_by_region<- bind_rows(this_conflict_region)
df_multi_region_conflicts_by_region<- rbind(df_multi_region_conflicts_by_region, df_this_conflict_by_region)
}
# Give full share to the separated-out single-region conflicts
single_region_conflicts<- single_region_conflicts %>%
mutate(conflict_share = 1)
df_ucdp_acd_unmixed_regions<- rbind(
subset(single_region_conflicts, select = colnames(df_multi_region_conflicts_by_region)),
df_multi_region_conflicts_by_region
)
df_ucdp_acd_agg<- df_ucdp_acd_unmixed_regions %>%
group_by(year, type, region) %>%
summarise(number_of_conflicts = n())
years<- seq(from= 1946, to = 2020)
types<- c(1,2,3,4)
df_ucdp_acd_full<- expand.grid(years, types)
# rename columns as per actual data
names(df_ucdp_acd_full)<- c("year", "type")
# merge in actual aggrgeated data
df_ucdp_acd_full<- left_join(df_ucdp_acd_full, df_ucdp_acd_agg)
# Replace NA with zeros as that's what 'no conflicts' means here
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(number_of_conflicts = replace_na(number_of_conflicts, 0))
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(region = recode(region,
`1` = "Europe",
`2` = "Middle East",
`3` = "Asia & Oceania",
`4` = "Africa",
`5` = "Americas"
))
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(type = recode(type,
`1` = "Colonial or imperial conflicts", # Extrasystemic
`2` = "Conflicts between states", # interstate
`3` = "Civil conflicts", # intrastate
`4` = "Civil conflicts with foreign state intervention" #  internationalized intrastate
))
# Add World total (by type)
world_total_by_type<- df_ucdp_acd_full %>%
group_by(year, type) %>%
summarise(number_of_conflicts = sum(conflict_share)) %>%
mutate(region = "World")
df_ucdp_acd<- read.csv("original/UCDP Yearly datasets since 1946/ucdp-prio-acd-211.csv")
dups<- df_ucdp_acd %>%
group_by(conflict_id, year) %>%
filter(n()>1)
kable(dups)
df_ucdp_acd<- df_ucdp_acd %>%
rename(type = type_of_conflict)
# Region code is stored as string. A string length>1 means more than one region is coded.
multi_region_conflicts<- df_ucdp_acd %>%
filter(nchar(region)>1)
single_region_conflicts<- df_ucdp_acd %>%
filter(nchar(region)==1)
kable(multi_region_conflicts)
#  a blank dataframe to append the data for individual conflicts with multiple regions
df_multi_region_conflicts_by_region<- data.frame(year = numeric(),
region = numeric(),
type = numeric(),
conflict_id = numeric(),
conflict_share = numeric())
# for each conflict with multiple regions make a new df with one row per region, and give them the proportionate share
for(this_id in unique(multi_region_conflicts$conflict_id)){
this_conflict<- multi_region_conflicts %>%
filter(conflict_id == this_id)
regions_vector<- this_conflict %>%
select(region) %>%
unique() %>%
as.character() %>%
gsub(" ", "", .) %>%
strsplit(",") %>%
unlist()
this_conflict_region<- list()
for(reg in regions_vector){
this_conflict_region[[reg]]<-  this_conflict %>%
mutate(region = reg,
conflict_share = 1/length(regions_vector))
}
df_this_conflict_by_region<- bind_rows(this_conflict_region)
df_multi_region_conflicts_by_region<- rbind(df_multi_region_conflicts_by_region, df_this_conflict_by_region)
}
# Give full share to the separated-out single-region conflicts
single_region_conflicts<- single_region_conflicts %>%
mutate(conflict_share = 1)
df_ucdp_acd_unmixed_regions<- rbind(
subset(single_region_conflicts, select = colnames(df_multi_region_conflicts_by_region)),
df_multi_region_conflicts_by_region
)
df_ucdp_acd_agg<- df_ucdp_acd_unmixed_regions %>%
group_by(year, type, region) %>%
summarise(number_of_conflicts = n(),) # counting rows to count conflicts
# Add World total (by type)
world_total_by_type<- df_ucdp_acd_unmixed_regions %>%
group_by(year, type) %>%
summarise(number_of_conflicts = sum(conflict_share)) %>%
mutate(region = "World")
df_ucdp_acd_agg<- df_ucdp_acd_agg %>%
mutate(region = recode(region,
`1` = "Europe",
`2` = "Middle East",
`3` = "Asia & Oceania",
`4` = "Africa",
`5` = "Americas"
))
df_ucdp_acd_agg<- rbind(df_ucdp_acd_agg, world_total_by_type)
View(df_ucdp_acd_agg)
years<- seq(from= 1946, to = 2020)
types<- c(1,2,3,4)
regions<- c( "Europe","Middle East","Asia & Oceania","Africa","Americas", "World")
df_ucdp_acd_full<- expand.grid(years, types, regions)
# rename columns as per actual data
names(df_ucdp_acd_full)<- c("year", "type", "region")
# merge in actual aggrgeated data
df_ucdp_acd_full<- left_join(df_ucdp_acd_full, df_ucdp_acd_agg)
# Replace NA with zeros as that's what 'no conflicts' means here
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(number_of_conflicts = replace_na(number_of_conflicts, 0))
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(type = recode(type,
`1` = "Colonial or imperial conflicts", # Extrasystemic
`2` = "Conflicts between states", # interstate
`3` = "Civil conflicts", # intrastate
`4` = "Civil conflicts with foreign state intervention" #  internationalized intrastate
))
# add 'all' type total
all_types_by_region_total<- df_ucdp_acd_full %>%
group_by(year, region ) %>%
summarise(number_of_conflicts = sum(number_of_conflicts)) %>%
mutate(type = "All types of conflict")
df_ucdp_acd_full<- rbind(df_ucdp_acd_full, all_types_by_region_total)
df_ucdp_acd_full_wide<- df_ucdp_acd_full %>%
pivot_wider(names_from = "type", values_from="number_of_conflicts")
View(df_ucdp_acd_full_wide)
df_ucdp_acd<- read.csv("original/UCDP Yearly datasets since 1946/ucdp-prio-acd-211.csv")
dups<- df_ucdp_acd %>%
group_by(conflict_id, year) %>%
filter(n()>1)
kable(dups)
```{r}
df_ucdp_acd<- read.csv("original/UCDP Yearly datasets since 1946/ucdp-prio-acd-211.csv")
```{r}
df_ucdp_acd<- read.csv("original/UCDP Yearly datasets since 1946/ucdp-prio-acd-211.csv")
df_ucdp_acd<- read.csv("original/UCDP Yearly datasets since 1946/ucdp-prio-acd-211.csv")
dups<- df_ucdp_acd %>%
group_by(conflict_id, year) %>%
filter(n()>1)
kable(dups)
df_ucdp_acd<- df_ucdp_acd %>%
rename(type = type_of_conflict)
# Add World total (by type)
df_ucdp_acd_agg_world<- df_ucdp_acd %>%
group_by(year, type) %>%
summarise(number_of_conflicts = sum(n())) %>%
mutate(region = "World")
# Region code is stored as string. A string length>1 means more than one region is coded.
multi_region_conflicts<- df_ucdp_acd %>%
filter(nchar(region)>1)
single_region_conflicts<- df_ucdp_acd %>%
filter(nchar(region)==1)
kable(multi_region_conflicts)
#  a blank dataframe to append the data for individual conflicts with multiple regions
df_multi_region_conflicts_by_region<- data.frame(year = numeric(),
region = numeric(),
type = numeric(),
conflict_id = numeric())
# for each conflict with multiple regions make a new df with one row per region, and give them the proportionate share
for(this_id in unique(multi_region_conflicts$conflict_id)){
this_conflict<- multi_region_conflicts %>%
filter(conflict_id == this_id)
regions_vector<- this_conflict %>%
select(region) %>%
unique() %>%
as.character() %>%
gsub(" ", "", .) %>%
strsplit(",") %>%
unlist()
this_conflict_region<- list()
for(reg in regions_vector){
this_conflict_region[[reg]]<-  this_conflict %>%
mutate(region = reg)
}
df_this_conflict_by_region<- bind_rows(this_conflict_region)
df_multi_region_conflicts_by_region<- rbind(df_multi_region_conflicts_by_region, df_this_conflict_by_region)
}
df_ucdp_acd_unmixed_regions<- rbind(
subset(single_region_conflicts, select = colnames(df_multi_region_conflicts_by_region)),
df_multi_region_conflicts_by_region
)
df_ucdp_acd_agg_regions<- df_ucdp_acd_unmixed_regions %>%
group_by(year, type, region) %>%
summarise(number_of_conflicts = n()) # counting rows to count conflicts
df_ucdp_acd_agg_regions<- df_ucdp_acd_agg_regions %>%
mutate(region = recode(region,
`1` = "Europe",
`2` = "Middle East",
`3` = "Asia & Oceania",
`4` = "Africa",
`5` = "Americas"
))
df_ucdp_acd_agg<- rbind(df_ucdp_acd_agg_regions,
subset(df_ucdp_acd_agg_world, select = colnames(df_ucdp_acd_agg_regions)))
years<- seq(from= 1946, to = 2020)
types<- c(1,2,3,4)
regions<- c( "Europe","Middle East","Asia & Oceania","Africa","Americas", "World")
df_ucdp_acd_full<- expand.grid(years, types, regions)
# rename columns as per actual data
names(df_ucdp_acd_full)<- c("year", "type", "region")
# merge in actual aggrgeated data
df_ucdp_acd_full<- left_join(df_ucdp_acd_full, df_ucdp_acd_agg)
# Replace NA with zeros as that's what 'no conflicts' means here
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(number_of_conflicts = replace_na(number_of_conflicts, 0))
df_ucdp_acd_full<- df_ucdp_acd_full %>%
mutate(type = recode(type,
`1` = "Number of colonial or imperial conflicts", # Extrasystemic
`2` = "Number of conflicts between states", # interstate
`3` = "Number of civil conflicts", # intrastate
`4` = "Number of civil conflicts with foreign state intervention" #  internationalized intrastate
))
# add 'all' type total
all_types_by_region_total<- df_ucdp_acd_full %>%
group_by(year, region ) %>%
summarise(number_of_conflicts = sum(number_of_conflicts)) %>%
mutate(type = "Number of conflicts (all types)")
df_ucdp_acd_full<- rbind(df_ucdp_acd_full, all_types_by_region_total)
df_ucdp_acd_full_wide<- df_ucdp_acd_full %>%
pivot_wider(names_from = "type", values_from="number_of_conflicts")
df_ucdp_acd_full_wide<- df_ucdp_acd_full %>%
pivot_wider(names_from = "type", values_from="number_of_conflicts") %>%
rename(entity = region)
write.csv(df_ucdp_acd_full_wide, "output/Number of state-based conflicts, by conflict type and world region (UCDP/PRIO).csv", row.names = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(knitr)
library(jsonlite)
library(states)
query_UCDP<- function(resource, version, pagesize){
##e.g.:
# resource<- "battledeaths"
# version<- "21.1"
# pagesize<- "1000" # This is the max number of rows per query
this_page<- 0 # This will iterate to query individual pages
total_pages<- 1 # Just an initial value (consistent with the 'while' condition in the first round of the loop). Upon the first request, this will change to the total number of pages in the response from the API)
results_list<- list() # List to store results
# Loop over all pages
while (this_page + 1 <= total_pages)
{
# Build query
query<- paste0("https://ucdpapi.pcr.uu.se/api/",
resource, "/",
version,
"?pagesize=", pagesize,
"&page=", this_page)
# Make query
JSON_this_page<- fromJSON(query)
# Store the data bit of the JSON object in the list
results_list[[as.character(this_page)]]<- JSON_this_page[["Result"]]
# Grab the total number of pages (in order to end the query)
total_pages<- JSON_this_page[["TotalPages"]]
print(paste0("Page ", this_page + 1, " of ", total_pages, " has been read in."))
this_page<- this_page + 1
}
# Stack results (currently in list) into a single dataframe
df_results_all_pages<- bind_rows(results_list)
return(df_results_all_pages)
}
test_structure<- function(df, obs_unit_vars){
df<- df %>%
select(all_of(obs_unit_vars))
# are there any NAs in either of these fields?
test_na<- sum(is.na(df))>0
# are there any duplicate rows?
count_dupes<- df %>%
group_by_all() %>%
summarise(n = n()) %>%
filter(n>1)
test_dupes<- nrow(count_dupes)>0
# Prepare a message to return
msg<- ""
if(test_na){
msg<- paste0(msg, "There are NA observations in the specified vars.")
}
if (test_dupes){
msg<- paste0(msg, "There are duplicate rows across the specified vars.")
}
if (msg == ""){
msg = "There are no NAs or duplicate rows across the specified vars."
}
print(msg)
}
split_rows<- function (df, sep, var_to_split, vars_to_share){
# E.g.:
# df<- df_one_sided
# sep<- ", "
# var_to_split<- "region"
# vars_to_share<- c("best_fatality_estimate", "low_fatality_estimate", "high_fatality_estimate")
# Separate out the multi-rows from the single-rows (as defined by the presence/absence of the separator character specified in the arguments)
df_multi_rows<- df %>%
filter(grepl(sep, eval(as.name(var_to_split))))
df_single_rows<- df %>%
filter(!grepl(sep, eval(as.name(var_to_split))))
# make a list to store dataframes for each row that is being split
multi_rows_split_list<- list()
# for each row to be split make a new df with one row per value of the splitting variable, and dividing the 'vars_to_share' by the number of rows in which it will be split
for(i in 1:nrow(df_multi_rows)) {
# e.g.
# i<- 1
row <- df_multi_rows[i,]
split_vector<- row %>%
select(!!var_to_split) %>%
as.character() %>%
strsplit(sep) %>%
unlist()
# repeat the row x number of elements in the split var
df_split_this_row <- row %>% slice(rep(1:n(), each = length(split_vector)))
# drop the split var and append the split_vector as a column
df_split_this_row<- df_split_this_row %>%
select(-!!var_to_split) %>%
mutate(!!var_to_split := split_vector)
# Divide any 'to_share' vars by the length of the split vector
if(missing(vars_to_share)) { # Check if this argument was supplied
} else {
for(v in vars_to_share){ #loop through each variable (given as string)
df_split_this_row<- df_split_this_row %>%
mutate(!!v := eval(as.name(v))/length(split_vector))
}
}
# add the dataframe to the running list
multi_rows_split_list[[as.character(i)]]<- df_split_this_row
}
# Combine all the dataframes together
df_multi_rows_split<- bind_rows(multi_rows_split_list)
# Add the single-rows data back in.
df_singlefied_rows<- rbind(df_multi_rows_split, df_single_rows)
return(df_singlefied_rows)
}
min_max_na_count_for_vars<- function(df, var_list){
# e.g.
# df<- df_ged
# var_list<- c("year","deaths_best", "deaths_low", "deaths_high","type", "country_id")
# min values
df_mins<- df %>%
summarise_at(var_list, min) %>%
mutate(summary_measure = "Min")
# max values
df_maxs<- df %>%
summarise_at(var_list, max) %>%
mutate(summary_measure = "Max")
# NA count
na_count <- df %>%
select_(.dots = var_list) %>%
summarise_all(funs(sum(is.na(.)))) %>%
mutate(summary_measure = "Count of NA observations")
df_data_check<- bind_rows(df_mins,df_maxs, na_count )
return(df_data_check)
}
# from zipfile
df_ged<- read.csv(unz("original/ged211.csv.zip", "ged211.csv"))
# # from API - takes up to 30 mins and is unstable. Not recommended!
# # API query parameters
# resource<- "gedevents"
# version<- "21.1"
# pagesize<- "1000" # This is the max number of rows per query UCDP allows
#
# # Query API
# df_ged<- query_UCDP(resource, version, pagesize)
kable(head(df_ged))
df_ged_clean<- df_ged %>%
rename(conflict_id = conflict_new_id,
dyad_id = dyad_new_id,
deaths_best = best,
deaths_high = high,
deaths_low = low,
type = type_of_violence) %>%
select(year, conflict_id, dyad_id, deaths_best, deaths_high, deaths_low, type, country_id)
summary(df_ged_clean)
# Any NAs?
kable(df_ged_clean %>%
summarise_all(funs(sum(is.na(.)))))
# API query parameters
resource<- "battledeaths"
version<- "21.1"
pagesize<- "1000" # This is the max number of rows per query UCDP allows
# Query API
df_brd<- query_UCDP(resource, version, pagesize)
df_brd_clean<- df_brd %>%
mutate(year = as.integer(year),
conflict_id = as.integer(conflict_id),
dyad_id = as.integer(dyad_id),
deaths_best = as.integer(bd_best),
deaths_high = as.integer(bd_high),
deaths_low = as.integer(bd_low),
type_statebased = as.integer(type_of_conflict)) %>%
select(year, conflict_id, dyad_id, deaths_best, deaths_high, deaths_low, type_statebased)
summary(df_brd_clean)
# Any NAs?
kable(df_brd_clean %>%
summarise_all(funs(sum(is.na(.)))))
# Test if the dataset is organised by conflict_id and year:
test_structure(df_brd_clean, c("year","dyad_id"))
test_structure(df_brd_clean, c("year","conflict_id"))
# Count conflicts per dyad-year
conf_per_dyad_distribution<- df_brd_clean %>%
select(year, dyad_id, conflict_id) %>%
group_by(year, dyad_id) %>%
summarise(number_of_conflicts = n()) %>%
group_by(number_of_conflicts) %>%
summarise(frequency = n())
kable(conf_per_dyad_distribution)
# Count dyads per conflict
dyads_per_conf_distribution<- df_brd_clean %>%
select(year, dyad_id, conflict_id) %>%
group_by(year, conflict_id) %>%
summarise(number_of_dyads = n()) %>%
group_by(number_of_dyads) %>%
summarise(frequency = n())
kable(dyads_per_conf_distribution)
# API query parameters
resource<- "nonstate"
version<- "21.1"
pagesize<- "1000" # This is the max number of rows per query UCDP allows
# Query API
df_non_state<- query_UCDP(resource, version, pagesize)
kable(head(df_non_state))
df_non_state_clean<- df_non_state %>%
mutate(conflict_id = as.integer(conflict_id),
dyad_id = as.integer(dyad_id),
deaths_best = as.integer(best_fatality_estimate),
deaths_high = as.integer(high_fatality_estimate),
deaths_low = as.integer(low_fatality_estimate)) %>%
select(year, conflict_id, dyad_id, deaths_best, deaths_high, deaths_low)
summary(df_non_state_clean)
# Any NAs?
kable(df_non_state_clean %>%
summarise_all(funs(sum(is.na(.)))))
# Test if the dataset is organised by conflict_id and year:
test_structure(df_non_state_clean, c("year","dyad_id"))
test_structure(df_non_state_clean, c("year","conflict_id"))
# Count conflicts per dyad-year
conf_per_dyad_distribution<- df_non_state_clean %>%
select(year, dyad_id, conflict_id) %>%
group_by(year, dyad_id) %>%
summarise(number_of_conflicts = n()) %>%
group_by(number_of_conflicts) %>%
summarise(frequency = n())
kable(conf_per_dyad_distribution)
# Count dyads per conflict
dyads_per_conf_distribution<- df_non_state_clean %>%
select(year, dyad_id, conflict_id) %>%
group_by(year, conflict_id) %>%
summarise(number_of_dyads = n()) %>%
group_by(number_of_dyads) %>%
summarise(frequency = n())
kable(dyads_per_conf_distribution)
# API query parameters
resource<- "onesided"
version<- "21.1"
pagesize<- "1000" # This is the max number of rows per query UCDP allows
# Query API
df_one_sided<- query_UCDP(resource, version, pagesize)
kable(head(df_one_sided))
